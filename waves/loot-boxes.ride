{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

# Till 2039537 height:
# GAME RECORD FORMAT:
#   gameId -> nnState_nnPlayerChoice_nnPlayerPublicKey_nnBetHeight_nnPotentialWinAmount_nnRandom_nnTIMEOUT
# where nn - defining number of characters for particular property
# Example:
#   123 -> 03WON_0512345_09taaWFeFzV_06575247_09190000000_014_07TIMEOUT
#
# After 2039537 height:
# GAME RECORD FORMAT:
#   gameId -> State_PlayerChoice_PlayerPublicKey_BetHeight_PotentialWinAmount_BetAssetId_Random_TIMEOUT
#
#   Example:
#   123 -> WON_12345_taaWFeFzV_575247_190000000_1_4_TIMEOUT
#
#   +-------------------------------+--------------+--------------------------------------+
#   | property description          | value        | possible values and notes            |
#   +-------------------------------+--------------+--------------------------------------+
#   | game id                       | 123          |                                      |
#   | game state                    | WON          | SUBMITTED | WON | LOST               |
#   | player's choice               | 12345        |                                      |
#   | player's public key           | taaWFeFzV    |                                      |
#   | bet's height                  | 575247       |                                      |
#   | potential win amount          | 190000000    |                                      |
#   | bet asset id                  | 1            | 0 for WAVES, 1 for USDN              |
#   | generated random number       | 4            | exists only for WON and LOST states  |
#   | was game finished by timeout? | TIMEOUT      | optional attribute                   |
#   +-------------------------------+--------------+--------------------------------------+

# CONSTANTS declaration
let SEP = "__"
let WAVESID = base58'WAVES'
let WAVESD      = 1_0000_0000
let GAME_NAME = "Xmas Tree"
let RANDOM_RANGE = 5
let NUM_BETS = 1
let MAX_DECORATIONS = 28
let puzzleMarket = "3PFQjjDMiZKQZdu5JqTHD7HwgSXyp9Rw9By".addressFromStringValue()

func getStrOrFail(address: Address, key: String) = address.getString(key).valueOrErrorMessage(makeString(["mandatory ", address.toString(), ".", key, " is not defined"], ""))
func getIntOrFail(address: Address, key: String) = address.getInteger(key).valueOrErrorMessage(makeString(["mandatory ", address.toString(), ".", key, " is not defined"], ""))
func getBoolOrFail(address: Address, key: String) = address.getBoolean(key).valueOrErrorMessage(makeString(["mandatory ", address.toString(), ".", key, " is not defined"], ""))

let allowedAssetsKey    = "%s%s__cfg__allowedAssets"
let assetsDecimalsKey   = "%s%s__cfg__assetsDecimals"
let betDividersKey      = "%s%s__cfg__assetsBetDividers"
let RSAPUBLIC64KEY      = "%s%s__cfg__rsaPublic64"
let SERVERADDRESSKEY    = "%s%s__cfg__benzAddress"
let RANDTIMEFRAMEKEY    = "%s%s__cfg__withdrawTimeFrame"
let GAMESCOUNTERKEY     = "%s%s__runtime__gameNum"
let blockedKey          = "%s%s__runtime__contractIsBlocked"
let reservedAmountsKey  = "%s%s__runtime__reservedAmounts"
let historyKey          = "%s%s__runtime__decorationsHistory"
let ipfsCountKey        = "%s%s__runtime__nftCounter"
func keyNftId(num: Int) = "%s%d__nft__" + num.toString()

func getIntArray(key: String) = {
    let a = this.getStrOrFail(key)
    func filler(acc: List[Int], el: String) = {
        acc :+ el.parseIntValue()
    }
    FOLD<10>(a.split(SEP), [], filler)
}

let ASSETS = this.getStrOrFail(allowedAssetsKey).split(SEP)
let DECIMALS = getIntArray(assetsDecimalsKey)
let BETDIVIDERS = getIntArray(betDividersKey)

func keyReservationByAssetStr(assetStr: String) = "$RESERVED_AMOUNT_" + assetStr
func keyReservationByAssetIdx(assetIdx: Int) = keyReservationByAssetStr(ASSETS[assetIdx])

let MINFEEWAVES = 5 * WAVESD / 1000 #0.005

let idxAssets      = 0
let idxDecimals    = 1
let idxDividers    = 2

let BET1  =  1
let BET2  =  2
let BET4  =  4
let BET8  =  8
let BET14 = 14

let RATEMULT = 1_0000
let RATE  = 3_0000 # fixed winAmount of 2*3=6 WAVES
let BETS = [
#    BET1, 
    BET2 # fixed bet of 2 WAVES
#    , BET4, BET8, BET14
]

let IdxGameState        = 0
let IdxPlayerChoice     = 1
let IdxPlayerPubKey58   = 2
let IdxStartedHeight    = 3
let IdxWinAmount        = 4
let IdxAssetId          = 5
#let IdxRandOrEmpty      = 6

let STATESUBMITTED  = "SUBMITTED"
let STATEWON        = "WON"
let STATELOST       = "LOST"

func getStringOrFail(key: String) = this.getString(key).valueOrErrorMessage(key + " key is not specified in this.state")

# TODO consider to create single config
let RSAPUBLIC = getStringOrFail(RSAPUBLIC64KEY).fromBase64String()
let SERVER = getStringOrFail(SERVERADDRESSKEY).addressFromStringValue()
# timeframe to initiate withdraw by oracle otherwise player automatically will be a winner, 7200 by default
let RANDORACLETIMEFRAME = this.getInteger(RANDTIMEFRAMEKEY).valueOrElse(7200)

func getIntOr(key: String, default: Int) = if isDefined(getInteger(key)) then getIntegerValue(key) else default
func setInt(key: String, value: Int) = IntegerEntry(key, value)
func incrementInt(key: String) = key.setInt(key.getIntOr(-1) + 1)
func changeInt(key: String, by: Int) = key.setInt(key.getIntOr(0) + by)

func assetIdToStr(assetIdOrUnit: ByteVector|Unit) = {
  match assetIdOrUnit {
    case b: ByteVector => b.toBase58String()
    case _ => "WAVES"
  }
}

func assetIdFromStr(assetIdStr: String) = {
    if (assetIdStr == "WAVES") then unit else assetIdStr.fromBase58String()
}

func getAssetBalance(assetIdOrUnit: ByteVector|Unit) = {
  match assetIdOrUnit {
    case assetId: ByteVector => this.assetBalance(assetId)
    case _ => this.wavesBalance().available
  }
}

func increaseReserveAmount(winAmount: Int, assetIdx: Int) = {
    let assetIdStr = ASSETS[assetIdx]
    let newReservedAmount = keyReservationByAssetIdx(assetIdx).getIntOr(0) + winAmount
    if newReservedAmount > assetIdStr.assetIdFromStr().getAssetBalance() then throw("Insufficient funds on " + GAME_NAME + " account. Transaction was rejected for your safety.") else
    newReservedAmount
}

func decreaseReservedAmount(gameId: String, assetIdx: Int, winAmount: Int) = {
    if keyReservationByAssetIdx(assetIdx).getIntOr(0) - winAmount < 0 then throw("Invalid " + GAME_NAME + " account state - reserved amount is less than 0") else
    keyReservationByAssetIdx(assetIdx).changeInt(-winAmount)
}

func validateAndGetAssetIdx(assetIdStr: String) = {
    let idx = ASSETS.indexOf(assetIdStr)
    if (!idx.isDefined()) then throw("Invalid payment asset") else idx.value()
}

func validateBetAndGetWinAmount(bet: Int, internalAssetIdx: Int, playerChoice: String) = {
    let dicesCount = size(playerChoice)
    func checkAmount(a: Boolean, x: Int) = a || (bet == x * DECIMALS[internalAssetIdx] / BETDIVIDERS[internalAssetIdx])

    if (!FOLD<5>(BETS, false, checkAmount)) then throw("Bet amount is not valid") else
    if(parseInt(playerChoice) == unit) then throw("Invalid player's choice") else
    if dicesCount != NUM_BETS then throw("Invalid length of player's choice") else

    fraction(bet, RATE, RATEMULT)
}

#    |  /~~~~ y[i] ~~~\ A|
#    | / x0[i]   x1[i] \ |
#    |/                 \|
#    |                   |
#   /|                   |\
#  / |                   | \
# /__|_______y[i+1]______|A'\
# x0[i+1]                 x1[i+1]
let HOR_LINES = [ # x0, x1, y
    [491, 506,  44], # 0
    [455, 542, 120], # 1
    [404, 596, 166], # 2
    [441, 556, 177], # 3
    [387, 620, 232], # 4
    [423, 620, 232], # 5
    [410, 592, 244], # 6
    [329, 665, 321], # 7
    [370, 666, 337], # 8
    [355, 645, 349], # 9
    [313, 692, 384], # 10
    [289, 682, 405], # 11
    [324, 657, 461], # 12
    [450, 575, 525], # 13
    [505, 505, 532]  # 14
]

let HALF = 5000
let M4 = 10000

func getCoords(gameId: String, rsaSign: ByteVector) = {
    # find trapezoid areas and total area
    func calcAreas(acc: (List[Int], Int, Int), ignored: List[Int]) = {
        let i = acc._3
        if (i == 14) then acc else
        let top = HOR_LINES[i]
        let bottom = HOR_LINES[i + 1]
        let area4 = (top[1] - top[0] + bottom[1] - bottom[0]) * (bottom[2] - top[2]) * 5000
        (acc._1 :+ area4, acc._2 + area4, acc._3 + 1)
    }
    let (areas, totalArea) = FOLD<15>(HOR_LINES, ([], 0, 0), calcAreas)
    let rand = toInt(sha256(rsaSign + gameId.toBytes())) % totalArea
    # choose trapezoid
    # acc: (counter, areaSoFar, resultIndex)
    func check(acc: (Int, Int, Int), area: Int) = {
        let i = acc._1
        let newArea = acc._2 + area
        (i + 1, newArea, if (acc._3 < 0 && newArea > rand) then i else acc._3)
    }
    let j = (FOLD<14>(areas, (0, 0, -1), check))._3
    let top = HOR_LINES[j]
    let bottom = HOR_LINES[j + 1]
    # find a random point in this trapezoid
    let mx04 = (top[0] + bottom[0]) * HALF # rectangle left midline
    let mx14 = (top[1] + bottom[1]) * HALF # rectangle right midline
    let h4 = (bottom[2] - top[2]) * M4
    let my4 = (top[2] + bottom[2]) * HALF
    let xy4 = toInt(sha256(rsaSign + j.toBytes())) % areas[j]
    let width4 = mx14 - mx04
    let randX4 = mx04 + (xy4 % width4)
    let randY4 = top[2] * M4 + fraction(xy4, M4, width4)
    # check whether point is outside of trapezoid
    # y = kx+b; x = (y-b) / k
    # left: k = (bottom[2]-top[2]) / (bottom[0]-top[0]); b = (top[2] * bottom[0] - top[0] * bottom[2]) / (bottom[0]-top[0])
    # right: k = (bottom[2]-top[2]) / (bottom[1]-top[1]); b = (top[2] * bottom[1] - top[1] * bottom[2]) / (bottom[1]-top[1])
    # x0 = (top[0] * (bottom[2] - y) - bottom[0] * (top[2] - y)) / (bottom[2]-top[2])
    # x1 = (top[1] * (bottom[2] - y) - bottom[1] * (top[2] - y)) / (bottom[2]-top[2])
    let a4 = top[2] * M4 - randY4
    let b4 = bottom[2] * M4 - randY4
    let x04 = fraction(top[0] * b4 - bottom[0] * a4, M4, h4)
    let x14 = fraction(top[1] * b4 - bottom[1] * a4, M4, h4)
    if (randX4 < x04) then {
        [2 * mx04 - randX4, 2 * my4 - randY4]
    } else if (randX4 > x14) then {
        [2 * mx14 - randX4, 2 * my4 - randY4]
    } else [randX4, randY4]
}

func getDecorationIndex(gameId: String, rsaSign: ByteVector) = {
    toInt(sha256(gameId.toBytes() + rsaSign)) % MAX_DECORATIONS
}

func generateRandChoice(gameId: String, rsaSign: ByteVector) = {
    # verify RSA signature to proof random
    let rsaSigValid = rsaVerify_16Kb(SHA256, toBytes(gameId), rsaSign, RSAPUBLIC)
    if !rsaSigValid then throw("Invalid RSA signature") else

    let rand = toInt(sha256(rsaSign)) % RANDOM_RANGE
    (rand + 1).toString()
}

func isPlayerWin(playerChoice: String, randChoise: String) = {
    let s = size(playerChoice)
    func check(a: Boolean, x: Int) = a || (s >= x && playerChoice.drop(x-1).take(1) == randChoise)
    FOLD<5>([1,2,3,4,5], false, check)
}

func formatGameDataS(gameStatus: String, playerChoice: String, playerPubKey58: String,
                    startedHeight: String, winAmount: String, assetIdx: String, randOrEmpty: String, xCoord: String, yCoord: String, prizeIndex: String) = {
    makeString([
        gameStatus,
        playerChoice,
        playerPubKey58,
        startedHeight,
        winAmount,
        assetIdx,
        (if randOrEmpty == "" then "" else randOrEmpty),
        xCoord,
        yCoord, 
        prizeIndex],
    "_")
}

func formatGameData(gameStatus: String, playerChoice: String, playerPubKey58: String,
                    startedHeight: Int, winAmount: Int, assetIdx: Int, randOrEmpty: String, xCoord: Int, yCoord: Int, prizeIndex: Int) = {
  formatGameDataS(gameStatus,
      playerChoice,
      playerPubKey58,
      startedHeight.toString(),
      winAmount.toString(),
      assetIdx.toString(),
      randOrEmpty,
      xCoord.toString(),
      yCoord.toString(),
      prizeIndex.toString())
}

func finishGameData(origGameData: List[String], gameStatus: String, rand: String, winByTimeout: Boolean, xCoord: Int, yCoord: Int, prizeIndex: Int) = {
  let finishGameData = formatGameDataS(gameStatus,
      origGameData[IdxPlayerChoice],
      origGameData[IdxPlayerPubKey58],
      origGameData[IdxStartedHeight],
      origGameData[IdxWinAmount],
      origGameData[IdxAssetId],
      rand,
      xCoord.toString(),
      yCoord.toString(),
      prizeIndex.toString())
  if (winByTimeout) then finishGameData + "_TIMEOUT" else finishGameData
}

# @returns LIST[gameState, playerChoice, playerPublicKey, startedHeight, winAmount, assetId]
func extractGameData(gameId: String) = {
    (match getString(this, gameId) {
        case str:String => str
        case _ => throw("Game: " + gameId + " not found.")
    }).split("_")
}

# tokenDescriptor format:
# "WAVES:${wavesDecimals}:${wavesBetDivider}_${assetId}:${assetDecimals}:${assetBetDivider}_..."
@Callable(i)
func constructorV1(rsaPublic64: String, benzAddress: String, randOracleTimeFrame: Int, tokensDescriptor: String) = {
  if (i.caller != this) then throw("not authorized") else

  func splitter(acc: (List[String], List[String], List[String]), elem: String) = {
    let tokList = elem.split(":")
    if (tokList.size() != 3) then throw("Invalid asset record") else
    (acc._1 :+ tokList[idxAssets], acc._2 :+ tokList[idxDecimals], acc._3 :+ tokList[idxDividers])
  }
  let r = FOLD<10>(tokensDescriptor.split_4C("_"), ([], [], []), splitter)

  [StringEntry(RSAPUBLIC64KEY, rsaPublic64),
    StringEntry(SERVERADDRESSKEY, benzAddress),
    IntegerEntry(RANDTIMEFRAMEKEY, randOracleTimeFrame),
    StringEntry(allowedAssetsKey, makeString_2C(r._1, SEP)),
    StringEntry(assetsDecimalsKey, makeString(r._2, SEP)),
    StringEntry(betDividersKey, makeString(r._3, SEP))
  ]
}

@Callable(i)
func maintenance(blocked: Boolean) = {
    if (i.caller != SERVER) then throw("not authorized") else
    [BooleanEntry(blockedKey, blocked)]
}

@Callable(i)
func bet(playerChoice: String) = {
    if (getBoolean(blockedKey).valueOrElse(false)) then throw("Game is stopped for maintenence") else

    let gameId = toBase58String(i.transactionId)

    if (i.payments.size() <= 1) then throw("2 payments must be attached") else
    if (isDefined(getString(this, gameId))) then throw("Bet for: " + gameId + " was already made.") else

    let betPmt = i.payments[0].value()
    let feePmt = i.payments[1].value()
    if (feePmt.assetId.isDefined())  then throw("feePmt (2nd payment) assetId must be in Waves") else
    if (feePmt.amount < MINFEEWAVES) then throw("feePmt (2nd payment) must be >= 0.005 Waves") else

    let assetIdStr = assetIdToStr(betPmt.assetId)
    let internalAssetIdx = validateAndGetAssetIdx(assetIdStr)
    let commission = feePmt.amount

    let winAmount = validateBetAndGetWinAmount(betPmt.amount, internalAssetIdx, playerChoice)

    let playerPubKey58 = toBase58String(i.callerPublicKey)
    let gameData = formatGameData(
            STATESUBMITTED, playerChoice, playerPubKey58, height, winAmount, internalAssetIdx, "", -1, -1, -1)

    [IntegerEntry(keyReservationByAssetIdx(internalAssetIdx), increaseReserveAmount(winAmount, internalAssetIdx)),
      GAMESCOUNTERKEY.incrementInt(),
      StringEntry(gameId, gameData),
      ScriptTransfer(SERVER, commission, feePmt.assetId)]
}

@Callable(i)
func withdraw(gameId: String, rsaSign: ByteVector) = {
    # verify that gameId is an invocation transaction
    # verify that gameId has not been used before
    # verify that betTx.recipient == this

    # verify height of gameId if currentHeight - betTxHeight > 2880 then winner is player

    # this condition verifies gameId and as a result there is no need to check recipient and sender
    # everything has been checked during bet stage
    let gameData = extractGameData(gameId)

    let gameState       = gameData[IdxGameState]
    let playerChoice    = gameData[IdxPlayerChoice]
    let startedHeight   = gameData[IdxStartedHeight].parseIntValue()
    let winAmount       = gameData[IdxWinAmount].parseIntValue()
    let assetIdx        = gameData[IdxAssetId].parseIntValue()
    let playerPubKey58  = gameData[IdxPlayerPubKey58]
    let playerAddress   = addressFromPublicKey(fromBase58String(playerPubKey58))

    if (gameState != STATESUBMITTED) then throw("Invalid game state for passed gameId") else
    if (i.caller != SERVER) then throw("Regular withdraw can be done by server only") else

    # if oracle doesn't initiate withdraw in specified timeframe then player will be a winner
    let winByTimeout = height - startedHeight > RANDORACLETIMEFRAME
    let randChoice = if (winByTimeout) then playerChoice.take(1) else generateRandChoice(gameId, rsaSign)

    let playerWin     = isPlayerWin(playerChoice, randChoice)
    let newGameStatus = if (playerWin) then STATEWON else STATELOST
    let coords = if (playerWin) then [-M4, -M4] else getCoords(gameId, rsaSign)
    let prizeIndex = if (playerWin) then -1 else getDecorationIndex(gameId, rsaSign)
    let x = coords[0] / M4
    let y = coords[1] / M4
    let newGameData = finishGameData(gameData, newGameStatus, randChoice, winByTimeout, x, y, prizeIndex)
    let oldHistory = getString(historyKey).valueOrElse("")
    let newHistory = (if (oldHistory == "") then "" else (oldHistory + "_")) + makeString([x.toString(), y.toString(), prizeIndex.toString()], ":")

    let ipfsCount = getInteger(ipfsCountKey).valueOrElse(0)
    let ipfsId = getString(keyNftId(ipfsCount)).valueOrElse("")
    let nftActions = if (!playerWin && ipfsId != "") then {
        strict mintedId = puzzleMarket.invoke("mint", [
            "XMAS-TOY", 
            "christmas-tree.gamgam.space",
            "GamGam.Space Xmas Toys",
            "https://ipfs.io/ipfs/" + ipfsId + "/display.jpg",
            "https://ipfs.io/ipfs/" + ipfsId + "/display.jpg",
            1, "", "", ""
        ], []).exactAs[String]
        [ScriptTransfer(playerAddress, 1, mintedId.fromBase58String()), IntegerEntry(ipfsCountKey, ipfsCount + 1)]
    } else {
        []
    }

    [StringEntry(gameId, newGameData),
      decreaseReservedAmount(gameId, assetIdx, winAmount)]
    ++ nftActions
    ++
    if (playerWin) then [ScriptTransfer(playerAddress, winAmount, assetIdFromStr(ASSETS[assetIdx]))]
    else [StringEntry(historyKey, newHistory)]
}

@Verifier(tx)
func verify() = {
    sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey) &&
    match tx {
        case ttx:TransferTransaction => {
            let assetIdx = validateAndGetAssetIdx(assetIdToStr(ttx.assetId))
            # do not allow to transfer reserved funds
            getAssetBalance(ttx.assetId) - ttx.amount >= keyReservationByAssetIdx(assetIdx).getIntOr(0)
        }
        case stx:SetScriptTransaction => {
            # allow to modify script only in case if all reserved amounts are 0
            func checker(acc: Boolean, asset: String) = acc && (keyReservationByAssetStr(asset).getIntOr(0) == 0)

            FOLD<10>(ASSETS, true, checker)
        }
        case itx:InvokeScriptTransaction => {
            itx.dApp == this && itx.function == "constructorV1"
        }
        case _ => false
    }
}
